### ðŸ“„ File: Dockerfile (YENÄ° VE DÃœZELTÄ°LMÄ°Åž VERSÄ°YON - v2.1)
# Bu Dockerfile, hem CPU hem de GPU imajlarÄ±nÄ± dinamik ve uyumlu bir ÅŸekilde oluÅŸturur.

# --- Build ArgÃ¼manlarÄ± ---
ARG TARGET_DEVICE=cpu
ARG PYTHON_VERSION=3.11

# --- Temel Ä°majlarÄ± TanÄ±mlama ---
FROM python:${PYTHON_VERSION}-slim-bullseye AS cpu-base
FROM pytorch/pytorch:2.3.1-cuda12.1-cudnn8-runtime AS gpu-base

# --- Hedef Ä°majÄ± SeÃ§me ---
FROM ${TARGET_DEVICE}-base AS base

# ==================================
#      AÅŸama 1: Builder
# ==================================
FROM base AS builder

WORKDIR /app

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

COPY requirements.txt .

# --- DÃœZELTÄ°LMÄ°Åž VE DAHA SAÄžLAM BAÄžIMLILIK KURULUMU ---
# Process substitution (<(...)) yerine standart shell komutlarÄ± kullanÄ±yoruz.
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    if [ "$TARGET_DEVICE" = "gpu" ]; then \
        echo "GPU imajÄ±: PyTorch zaten mevcut, diÄŸer baÄŸÄ±mlÄ±lÄ±klar kuruluyor."; \
        # 'torch' iÃ§eren satÄ±rlarÄ± atlayarak geÃ§ici bir requirements dosyasÄ± oluÅŸtur
        grep -v 'torch' requirements.txt > requirements.tmp.txt; \
        pip install --no-cache-dir -r requirements.tmp.txt; \
    else \
        echo "CPU imajÄ±: Hafif PyTorch ve diÄŸer baÄŸÄ±mlÄ±lÄ±klar kuruluyor."; \
        pip install --no-cache-dir -r requirements.txt --extra-index-url https://download.pytorch.org/whl/cpu; \
    fi

# ==================================
#      AÅŸama 2: Final Image
# ==================================
FROM base AS final

WORKDIR /app

ARG GIT_COMMIT="unknown"
ARG BUILD_DATE="unknown"
ARG SERVICE_VERSION="0.0.0"
ENV GIT_COMMIT=${GIT_COMMIT} \
    BUILD_DATE=${BUILD_DATE} \
    SERVICE_VERSION=${SERVICE_VERSION} \
    PYTHONUNBUFFERED=1 \
    PATH="/opt/venv/bin:$PATH" \
    HF_HOME="/app/model-cache"

RUN apt-get update && apt-get install -y --no-install-recommends \
    netcat-openbsd \
    curl \
    ca-certificates \
    libpq5 \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/*

RUN addgroup --system --gid 1001 appgroup && \
    adduser --system --no-create-home --uid 1001 --ingroup appgroup appuser

COPY --from=builder --chown=appuser:appgroup /opt/venv /opt/venv
COPY --chown=appuser:appgroup app ./app

RUN mkdir -p /app/model-cache && \
    chown -R appuser:appgroup /app/model-cache

USER appuser

# knowledge-query-service iÃ§in:
EXPOSE 17020 17021 17022

# knowledge-query-service iÃ§in:
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "17020", "--no-access-log"]